global Ops {
  const ADDER = 2b00;
  const BOOL = 2b01;
  const SHIFT = 2b10;
  const COMP = 2b11;
}

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
  }
  
  // signals for readability
  sig alufn[6];
  sig a[8];
  sig b[8];
  sig o8[8];
  
  // initialize components
  add add8;//(8b0),.b(8b0),.alufn10(2b0));
  compare compare8;//lufn21(2b0),.v(0),.n(0),.z(0));
  bool bool8;//(.alufn30(4b0),.a(8b0),.b(8b0));
  shift shift8;//(.alufn10(2b0),.a(8b0),.b(3b0));

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset_cond
    
    // factory defaults
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port

    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits  
    
    // inputs of ALU
    alufn[5:0] = io_dip[2][5:0];
    a[7:0] = io_dip[1][7:0];
    b[7:0] = io_dip[0][7:0];
    
    add8.a = a;
    add8.b = b;
    add8.alufn10 = alufn[1:0];
    bool8.a = a;
    bool8.b = b;
    bool8.alufn30 = alufn[3:0];
    shift8.a = a;
    shift8.b = b[2:0];
    shift8.alufn10 = alufn[1:0];
    compare8.z = add8.z;
    compare8.v = add8.v;
    compare8.n = add8.n;
    compare8.alufn21 = alufn[2:1];
    
    // TMUX to select operation
    case (alufn[5:4]) {
      Ops.ADDER:
        // output of adder
        o8[7:0] = add8.out[7:0];
        
      Ops.BOOL:
        // output of boolean
        o8[7:0] = bool8.out[7:0];
      
      Ops.SHIFT:
        // output of shift
        o8[7:0] = shift8.out[7:0];
      
      Ops.COMP:
        // output of compare 
        add8.alufn10 = 2b01;
        o8 = compare8.out[7:0];
        
      default:
        o8 = 8b1;
    }
    
    // output of ALU 
    io_led[0] = o8;
    
    
  }
}
