/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_sseg_seg;
  wire [4-1:0] M_sseg_sel;
  reg [16-1:0] M_sseg_values;
  multi_seven_seg_2 sseg (
    .clk(clk),
    .rst(rst),
    .values(M_sseg_values),
    .seg(M_sseg_seg),
    .sel(M_sseg_sel)
  );
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  localparam IDLE_state = 4'd0;
  localparam ADDER1_state = 4'd1;
  localparam ADDER2_state = 4'd2;
  localparam BOOL1_state = 4'd3;
  localparam BOOL2_state = 4'd4;
  localparam BOOL3_state = 4'd5;
  localparam BOOL4_state = 4'd6;
  localparam SHIFT1_state = 4'd7;
  localparam SHIFT2_state = 4'd8;
  localparam SHIFT3_state = 4'd9;
  localparam COMP1_state = 4'd10;
  localparam COMP2_state = 4'd11;
  localparam COMP3_state = 4'd12;
  localparam END_state = 4'd13;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  reg [5:0] alufn;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] o8;
  
  reg fsm_switch;
  
  wire [8-1:0] M_add8_out;
  wire [1-1:0] M_add8_n;
  wire [1-1:0] M_add8_v;
  wire [1-1:0] M_add8_z;
  reg [2-1:0] M_add8_alufn10;
  reg [8-1:0] M_add8_a;
  reg [8-1:0] M_add8_b;
  add_3 add8 (
    .alufn10(M_add8_alufn10),
    .a(M_add8_a),
    .b(M_add8_b),
    .out(M_add8_out),
    .n(M_add8_n),
    .v(M_add8_v),
    .z(M_add8_z)
  );
  
  wire [8-1:0] M_compare8_out;
  reg [3-1:0] M_compare8_alufn31;
  reg [1-1:0] M_compare8_z;
  reg [1-1:0] M_compare8_n;
  reg [1-1:0] M_compare8_v;
  compare_4 compare8 (
    .alufn31(M_compare8_alufn31),
    .z(M_compare8_z),
    .n(M_compare8_n),
    .v(M_compare8_v),
    .out(M_compare8_out)
  );
  
  wire [8-1:0] M_bool8_out;
  reg [4-1:0] M_bool8_alufn30;
  reg [8-1:0] M_bool8_a;
  reg [8-1:0] M_bool8_b;
  bool_5 bool8 (
    .alufn30(M_bool8_alufn30),
    .a(M_bool8_a),
    .b(M_bool8_b),
    .out(M_bool8_out)
  );
  
  wire [8-1:0] M_shift8_out;
  reg [2-1:0] M_shift8_alufn10;
  reg [8-1:0] M_shift8_a;
  reg [3-1:0] M_shift8_b;
  shift_6 shift8 (
    .alufn10(M_shift8_alufn10),
    .a(M_shift8_a),
    .b(M_shift8_b),
    .out(M_shift8_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    alufn[0+5-:6] = io_dip[16+0+5-:6];
    a[0+7-:8] = io_dip[8+0+7-:8];
    b[0+7-:8] = io_dip[0+0+7-:8];
    fsm_switch = io_dip[16+7+0-:1];
    
    case (M_state_q)
      IDLE_state: begin
        M_counter_d = 1'h0;
        if (fsm_switch == 1'h1) begin
          M_state_d = M_state_q + 1'h1;
        end
      end
      ADDER1_state: begin
        a = 8'h1f;
        b = 8'h15;
        alufn[0+5-:6] = 6'h00;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      ADDER2_state: begin
        a = 8'h1f;
        b = 8'h15;
        alufn[0+5-:6] = 6'h01;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      BOOL1_state: begin
        a = 8'hcc;
        b = 8'haa;
        alufn[0+5-:6] = 6'h18;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      BOOL2_state: begin
        a = 8'hcc;
        b = 8'haa;
        alufn[0+5-:6] = 6'h1e;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      BOOL3_state: begin
        a = 8'hcc;
        b = 8'haa;
        alufn[0+5-:6] = 6'h16;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      BOOL4_state: begin
        a = 8'hcc;
        b = 8'haa;
        alufn[0+5-:6] = 6'h1a;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      SHIFT1_state: begin
        a = 8'h01;
        b = 8'h06;
        alufn[0+5-:6] = 6'h20;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      SHIFT2_state: begin
        a = 8'h80;
        b = 8'h06;
        alufn[0+5-:6] = 6'h21;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      SHIFT3_state: begin
        a = 8'hc0;
        b = 8'h05;
        alufn[0+5-:6] = 6'h23;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      COMP1_state: begin
        a = 8'h3f;
        b = 8'h3f;
        alufn[0+5-:6] = 6'h33;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      COMP2_state: begin
        a = 8'h3f;
        b = 8'h3e;
        alufn[0+5-:6] = 6'h35;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      COMP3_state: begin
        a = 8'h3e;
        b = 8'h3f;
        alufn[0+5-:6] = 6'h37;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = M_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      END_state: begin
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1]) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end
      end
    endcase
    if (fsm_switch == 1'h0) begin
      M_state_d = IDLE_state;
    end
    M_add8_a = a;
    M_add8_b = b;
    M_bool8_a = a;
    M_bool8_b = b;
    M_shift8_a = a;
    M_shift8_b = b[0+2-:3];
    M_compare8_z = M_add8_z;
    M_compare8_v = M_add8_v;
    M_compare8_n = M_add8_n;
    M_add8_alufn10 = alufn[0+1-:2];
    M_bool8_alufn30 = alufn[0+3-:4];
    M_shift8_alufn10 = alufn[0+1-:2];
    M_compare8_alufn31 = alufn[1+2-:3];
    
    case (alufn[4+1-:2])
      2'h0: begin
        o8[0+7-:8] = M_add8_out[0+7-:8];
      end
      2'h1: begin
        o8[0+7-:8] = M_bool8_out[0+7-:8];
      end
      2'h2: begin
        o8[0+7-:8] = M_shift8_out[0+7-:8];
      end
      2'h3: begin
        M_add8_alufn10 = 2'h1;
        o8 = M_compare8_out[0+7-:8];
      end
      default: begin
        o8 = 8'h01;
      end
    endcase
    
    case (alufn)
      6'h00: begin
        M_sseg_values[8+3-:4] = 4'h1;
        M_sseg_values[4+3-:4] = 4'h4;
        M_sseg_values[0+3-:4] = 4'h4;
      end
      6'h01: begin
        M_sseg_values[8+3-:4] = 4'hc;
        M_sseg_values[4+3-:4] = 4'hd;
        M_sseg_values[0+3-:4] = 4'h2;
      end
      6'h18: begin
        M_sseg_values[8+3-:4] = 4'h1;
        M_sseg_values[4+3-:4] = 4'h8;
        M_sseg_values[0+3-:4] = 4'h4;
      end
      6'h1e: begin
        M_sseg_values[8+3-:4] = 4'h0;
        M_sseg_values[4+3-:4] = 4'h9;
        M_sseg_values[0+3-:4] = 4'hb;
      end
      6'h16: begin
        M_sseg_values[8+3-:4] = 4'he;
        M_sseg_values[4+3-:4] = 4'h9;
        M_sseg_values[0+3-:4] = 4'hb;
      end
      6'h1a: begin
        M_sseg_values[8+3-:4] = 4'h0;
        M_sseg_values[4+3-:4] = 4'h0;
        M_sseg_values[0+3-:4] = 4'h1;
      end
      6'h20: begin
        M_sseg_values[8+3-:4] = 4'hc;
        M_sseg_values[4+3-:4] = 4'h6;
        M_sseg_values[0+3-:4] = 4'h7;
      end
      6'h21: begin
        M_sseg_values[8+3-:4] = 4'hc;
        M_sseg_values[4+3-:4] = 4'h6;
        M_sseg_values[0+3-:4] = 4'hb;
      end
      6'h23: begin
        M_sseg_values[8+3-:4] = 4'hc;
        M_sseg_values[4+3-:4] = 4'hb;
        M_sseg_values[0+3-:4] = 4'h1;
      end
      6'h33: begin
        M_sseg_values[8+3-:4] = 4'h0;
        M_sseg_values[4+3-:4] = 4'h3;
        M_sseg_values[0+3-:4] = 4'h5;
      end
      6'h35: begin
        M_sseg_values[8+3-:4] = 4'h0;
        M_sseg_values[4+3-:4] = 4'h3;
        M_sseg_values[0+3-:4] = 4'h7;
      end
      6'h37: begin
        M_sseg_values[8+3-:4] = 4'h3;
        M_sseg_values[4+3-:4] = 4'h7;
        M_sseg_values[0+3-:4] = 4'h5;
      end
      default: begin
        M_sseg_values[8+3-:4] = 4'he;
        M_sseg_values[4+3-:4] = 4'he;
        M_sseg_values[0+3-:4] = 4'he;
      end
    endcase
    io_led[0+7-:8] = o8;
    io_led[8+7-:8] = b;
    io_led[16+7-:8] = a;
    io_seg = ~M_sseg_seg;
    io_sel = ~M_sseg_sel;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
